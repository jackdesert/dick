<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Dickshunary</title>
        <link href='{{ url_for('static', filename='reset.css') }}' rel='stylesheet' type='text/css'>
        <link href='{{ url_for('static', filename='style.css') }}' rel='stylesheet' type='text/css'>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.6.15/browser.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

    </head>
    <body>
        <div id="content"></div>

        <script type="text/babel">
            var oddOrEven = function(){
                var state = 'odd'
                var toggle = function(klass){
                    if (state === 'odd'){
                        state = 'even'
                    }else{
                        state = 'odd'
                    }
                    return klass + ' ' + state
                }
                return { 'toggle' : toggle }
            }

            var toggle = oddOrEven()



            var WholePage = React.createClass({
                getInitialState: function() {
                console.log('data: ', {{data}})
                    return {data: {{data}} };
                },

                handleSearchSubmit: function(jsonData) {
                    var existingWords = this.state.data
                    //var newComments = comments.concat([comment])
                    $.ajax({
                        url: this.props.url,
                        dataType: 'json',
                        type: 'POST',
                        data: jsonData,
                        success: function(data) {
                            if (Object.keys(data.parts_of_speech).length === 0){
                                // Don't do anything if word not found
                                alert('"' + data.word + '" not found')
                                return
                            }
                            var copy = JSON.parse(JSON.stringify(this.state.data))
                            copy.unshift(data)
                            this.setState({data: copy})
                        }.bind(this),
                        error: function(xhr, status, err) {
                            console.error(this.props.url, status, err.toString())
                        }.bind(this)
                    })
                },

                render: function() {
                    return (
                        <div className="wrapper">
                            <h1>WhatWasThatWord?</h1>
                            <div className="subtitle">A dictionary that remembers words you&rsquo;ve recently needed</div>
                            <SearchForm onSearchSubmit={this.handleSearchSubmit} />
                            <WordList data={this.state.data}/>
                        </div>
                    )
                }
            })

            var SearchForm = React.createClass({
                handleSubmit: function(e) {
                    e.preventDefault()
                    var text = React.findDOMNode(this.refs.text).value.trim()
                    if (!text) {
                      return
                    }
                    this.props.onSearchSubmit({word: text})
                    React.findDOMNode(this.refs.text).value = ''
                },
                render: function() {
                    return (
                        <form className="search-form" onSubmit={this.handleSubmit}>
                            <input type="text" placeholder="Which word?" ref="text" />
                            <input type="submit" value="Grok" />
                        </form>
                    )
                }
            })

            var WordList = React.createClass({
                render: function() {
                    var entries = this.props.data.map(function(entry){
                        return (
                            <Word entry={entry} />
                        )
                    })

                    return (
                        <div className="wordList">
                          {entries}
                        </div>
                    )
              }
            })


            var Word = React.createClass({


                render: function() {


                    var pos = this.props.entry.parts_of_speech
                    var keys = []

                    for (var key in pos){
                        if (pos.hasOwnProperty(key)) {
                            keys.push(key)
                        }
                    }

                    var partsOfSpeech = keys.map(function(key){
                        var individualEntries = pos[key].map(function(entry){
                            var htmlObject = function(text){
                                //this is only here to use with dangerouslySetInnerHtml
                                return {'__html': text}
                            }

                            var example, synonyms
                            if (entry.example){
                                example = <div className="example" dangerouslySetInnerHTML={ htmlObject(entry.example) }></div>
                            }else{
                                example = null
                            }

                            if (entry.synonyms){
                                synonyms = <div className="synonyms"><span className="synonym-label">synonyms:</span> {entry.synonyms.join(", ")}</div>
                            }else{
                                synonyms = null
                            }

                            return (
                                <div className="part-of-speech-contents">
                                    <div className="definition" dangerouslySetInnerHTML={ htmlObject(entry.definition) }></div>
                                    {example}
                                    {synonyms}
                                </div>
                            )
                        })
                        return (
                            <div className="part-of-speech-wrapper">
                                <div className="part-of-speech">{key}</div>
                                {individualEntries}
                            </div>
                        )
                    })


                    return (
                        <div className={ toggle.toggle('word-wrapper') }>
                            <div className="the-word">
                                {this.props.entry.word}
                            </div>

                            <div className="pronunciation">
                                <div className="ipa inline">
                                    /{this.props.entry.pronunciation.ipa}/
                                </div>
                                <div className="mp3 inline">
                                    <a href={this.props.entry.pronunciation.mp3}>
                                        <img src='{{url_for('static', filename='speaker.png')}}' />
                                    </a>

                                </div>
                            </div>
                            {partsOfSpeech}
                        </div>
                    )
              }
            })

            // Note the React.render call needs to come after other things are defined.
            var data2 = [{'word':'Hello', 'pronunciation':{'ipa':'whee', 'mp3':'yess.mp3'}}]

            React.render(
              <WholePage url="/api/search" />,
              document.getElementById('content')
            )
        </script>
        <div class='footer'>
            <div class='footer-row'>
                Created by <a href='mailto:jackdesert@gmail.com?Subject=Cool%20Dictionary'>Jack Desert</a>
            </div>

            <div class='footer-row'>
                Source Code: <a href='https://github.com/jackdesert/dickshunary' target='_blank'>here</a>
            </div>
        </footer>
    </body>
</html>
